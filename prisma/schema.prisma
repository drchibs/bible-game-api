// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  uuid      String    @default(uuid()) @unique
  name      String
  email     String    @unique
  password  String
  highScore Int       @default(0)
  role      Role      @default(PLAYER)
  countryId Int?
  country   Country?   @relation(fields: [countryId], references: [id])
  rankId    Int?
  rank      Rank?      @relation(fields: [rankId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  PlayLog  PlayLog[]
}

model GameBank {
  id           Int            @id @default(autoincrement())
  uuid         String         @default(uuid())
  bookId       Int
  text         String
  book         Book?           @relation(fields: [bookId], references: [id])
  chapter      String
  verse        String[]
  difficultyId Int
  difficulty   GameDifficulty? @relation(fields: [difficultyId], references: [id])
  tags         String[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Rank {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model GameDifficulty {
  id        Int        @id @default(autoincrement())
  uuid      String     @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  GameBank  GameBank[]
}

model PlayLog {
  id                     Int      @id @default(autoincrement())
  uuid                   String   @default(uuid())
  playerId               Int?
  player                 User?     @relation(fields: [playerId], references: [id])
  gameType               GameType @default(QUICK_GAME)
  totalScore             Int      @default(0)
  baseScore              Int      @default(0)
  bonusScore             Int      @default(0)
  averageTimeSpent       Int      @default(0)
  numberOfCorrectAnswers Int      @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Faq {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id   Int    @id @default(autoincrement())
  uuid String @default(uuid())
  name String
  code String
  User User[]
}

model Book {
  id        Int        @id @default(autoincrement())
  uuid      String     @default(uuid())
  name      String     @unique
  chapters  Int
  verses    Int
  testament Testament
  group     Group
  GameBank  GameBank[]
}

enum Testament {
  OLD
  NEW
}

enum GameType {
  QUICK_GAME
  PILGRIM_PROGRESS
}

enum Role {
  ADMIN
  CONTRIBUTOR
  PLAYER
}

enum Group {
  PENTATEUCH
  HISTORICAL
  POETIC
  PSALMS
  PROPHETS
  GOSPELS
  EPISTLES
}
